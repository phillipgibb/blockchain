#!/usr/bin/env bash
set -e

# This script is a wrapper for running burrow in a cluster, that is by a cluster
# orchestration environment like Kubernetes or Mesos

# For why this is necessary see ->
# https://github.com/kubernetes/kubernetes/issues/23404
CHAIN_NAME=$(echo $CHAIN_NAME | tr -d '\n')
CHAIN_NODE_NUMBER=$(echo $CHAIN_NODE_NUMBER | tr -d '\n')
CHAIN_SEEDS=$(echo $CHAIN_SEEDS | tr -d '\n')
MONAX_PATH=${MONAX_PATH:-$HOME/.monax}
MONAX_PATH=$(echo $MONAX_PATH | tr -d '\n')
KEY_ADDRESS=$(echo $KEY_ADDRESS | tr -d '\n')
KEY_PUBLIC=$(echo $KEY_PUBLIC | tr -d '\n')
KEY_PRIVATE=$(echo $KEY_PRIVATE | tr -d '\n')
ORG_NAME=$(echo $ORG_NAME | tr -d '\n')

# Normal var setting
CHAIN_DIR=$MONAX_PATH/chains/$CHAIN_NAME
CHAIN_ID=${CHAIN_ID:-$CHAIN_NAME}
CHAIN_API_PORT=${CHAIN_API_PORT:-1337}
CHAIN_PEER_PORT=${CHAIN_PEER_PORT:-46656}
CHAIN_RPC_PORT=${CHAIN_RPC_PORT:-46657}
CHAIN_NODE_NUMBER=${CHAIN_NODE_NUMBER:-"000"}
CHAIN_SEEDS=${CHAIN_SEEDS:-""}
ORG_NAME=${ORG_NAME:-"myGreatOrg"}

# All known variables should either have defaults set above, or checks here.
check() {
  echo -e "\tChecking address of key."
  [ -z "$KEY_ADDRESS" ] && { echo "Sad marmot face. Please set KEY_ADDRESS and re-run me."; exit 1; }
  echo -e "\tChecking public key."
  [ -z "$KEY_PUBLIC" ] && { echo "Sad marmot face. Please set KEY_PUBLIC and re-run me."; exit 1; }
  echo -e "\tChecking private key."
  [ -z "$KEY_PRIVATE" ] && { echo "Sad marmot face. Please set KEY_PRIVATE and re-run me."; exit 1; }
  echo -e "\tChecking chain name."
  [ -z "$CHAIN_NAME" ] && { echo "Sad marmot face. Please set CHAIN_NAME and re-run me."; exit 1; }
  echo -e "\tChecking genesis."
  if [ -z "$CHAIN_GENESIS" ]
  then
    if [ ! -e "$CHAIN_DIR"/genesis.json ]
    then
      echo "Sad marmot face. Please set CHAIN_GENESIS and re-run me."
      exit 1
    fi
  fi
  echo -e "\tChecks complete."
}

setup_dir() {
  if [ ! -d "$CHAIN_DIR" ]
  then
    echo -e "\tChain dir does not exist. Creating."
    mkdir -p $CHAIN_DIR
  else
    echo -e "\tChain dir exists. Not creating."
  fi
  cd $CHAIN_DIR
  echo -e "\tChain dir setup."
}

write_config() {
  cat <<EOF > config.toml
[chain]
assert_chain_id = "$CHAIN_ID"
major_version = 0
minor_version = 12
genesis_file = "genesis.json"
  [chain.consensus]
  name = "tendermint"
  major_version = 0
  minor_version = 6
  relative_root = "tendermint"
  [chain.manager]
  name = "burrowmint"
  major_version = 0
  minor_version = 12
  relative_root = "burrowmint"
[servers]
  [servers.bind]
  address = ""
  port = $CHAIN_API_PORT
  [servers.tls]
  tls = false
  cert_path = ""
  key_path = ""
  [servers.cors]
  enable = false
  allow_origins = []
  allow_credentials = false
  allow_methods = []
  allow_headers = []
  expose_headers = []
  max_age = 0
  [servers.http]
  json_rpc_endpoint = "/rpc"
  [servers.websocket]
  endpoint = "/socketrpc"
  max_sessions = 50
  read_buffer_size = 4096
  write_buffer_size = 4096
  [servers.tendermint]
  rpc_local_address = "0.0.0.0:$CHAIN_RPC_PORT"
  endpoint = "/websocket"
[tendermint]
private_validator_file = "priv_validator.json"
  [tendermint.configuration]
  moniker = "$CHAIN_NAME-$ORG_NAME-validator-$CHAIN_NODE_NUMBER"
  seeds = "$CHAIN_SEEDS"
  fast_sync = false
  db_backend = "leveldb"
  log_level = "$CHAIN_LOG_LEVEL"
  node_laddr = "0.0.0.0:$CHAIN_PEER_PORT"
  rpc_laddr = "0.0.0.0:$CHAIN_RPC_PORT"
  proxy_app = "tcp://127.0.0.1:46658"
    [tendermint.configuration.p2p]
    dial_timeout_seconds = 3
    handshake_timeout_seconds = 20
    max_num_peers = 20
    authenticated_encryption = true
    send_rate = 512000
    recv_rate = 512000
    fuzz_enable = false # use the fuzz wrapped conn
    fuzz_active = false # toggle fuzzing
    fuzz_mode = "drop"  # eg. drop, delay
    fuzz_max_delay_milliseconds = 3000
    fuzz_prob_drop_rw = 0.2
    fuzz_prob_drop_conn = 0.00
    fuzz_prob_sleep = 0.00
[burrowmint]
db_backend = "leveldb"
tendermint_host = "0.0.0.0:$CHAIN_RPC_PORT"
EOF
  echo -e "\tConfig file written."
}

write_key_file() {
  cat <<EOF > priv_validator.json
{
  "address": "$KEY_ADDRESS",
  "pub_key": [
    1,
    "$KEY_PUBLIC"
  ],
  "priv_key": [
    1,
    "$KEY_PRIVATE"
  ],
  "last_height": 0,
  "last_round": 0,
  "last_step": 0
}
EOF
  echo -e "\tKey file written."
}

write_genesis_file() {
  [ -z "$CHAIN_GENESIS" ] && echo -e "\tUsing preloaded genesis file." && return 0
  echo -e "\tWriting genesis file from environment variables."
  echo $CHAIN_GENESIS > genesis.json
}

main() {
  echo "Running pre-boot checks."
  check

  echo "Setting up chain directory."
  setup_dir

  echo "Writing config file."
  write_config

  echo "Writing key file."
  write_key_file

  echo "Writing genesis file."
  write_genesis_file

  sleep 2 # hack to let the cluster provision echo "Starting burrow"
  burrow serve
}

main $@